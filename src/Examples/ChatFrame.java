/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Examples;

import Model.Channel;
import Model.ChannelException;
import Model.ForumMessage;
import Model.Moderator;
import Model.Participant;
import java.io.IOException;
import java.net.InetAddress;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Josue
 */
public class ChatFrame extends javax.swing.JFrame implements Moderator, Participant {

    private String name;
    private Channel channel;
    private DefaultListModel model;
    
    /**
     * Creates new form ChatFrame
     */
    public ChatFrame(String name, String address, int port, int bufferLength, int confirmationTime, int ttl) throws ChannelException, IOException {
        this.name = name;
        this.model = new DefaultListModel();
        this.channel = Channel.getInstance(InetAddress.getByName(address), port, bufferLength, confirmationTime, ttl);
        this.channel.addModerator(this);
        this.channel.joinGroup(this);
        initComponents();
        this.participantNames.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        participantNames = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        userMessages = new javax.swing.JTextArea();
        sendMessage = new javax.swing.JTextField();
        send = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(participantNames);

        userMessages.setColumns(20);
        userMessages.setRows(5);
        userMessages.setText("Mensajes de usuario.");
        jScrollPane2.setViewportView(userMessages);

        sendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageActionPerformed(evt);
            }
        });

        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 132, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(sendMessage)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(send))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(send)
                            .add(sendMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendMessage() {
        try {
            this.channel.sendMessage(this, this.sendMessage.getText());
            this.sendMessage.setText("");
        } catch (ChannelException ex) {
            Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        this.sendMessage();
    }//GEN-LAST:event_sendActionPerformed

    private void sendMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageActionPerformed
        this.sendMessage();
    }//GEN-LAST:event_sendMessageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    String nombre = JOptionPane.showInputDialog("Nombre");
                    String direccion = JOptionPane.showInputDialog("Dirección");
                    int puerto = Integer.parseInt(JOptionPane.showInputDialog("Puerto"));
                    int buffer = Integer.parseInt(JOptionPane.showInputDialog("Largo del buffer"));
                    int confirmacion = Integer.parseInt(JOptionPane.showInputDialog("Tiempo de confirmación de participante"));
                    int ttl = Integer.parseInt(JOptionPane.showInputDialog("Iteraciones de espera"));
                    new ChatFrame(nombre, direccion, puerto, buffer, confirmacion, ttl).setVisible(true);
                } catch (ChannelException ex) {
                    Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList participantNames;
    private javax.swing.JButton send;
    private javax.swing.JTextField sendMessage;
    private javax.swing.JTextArea userMessages;
    // End of variables declaration//GEN-END:variables

    @Override
    public void participantRequest(String participantName) {
        this.model.addElement(participantName);
    }

    @Override
    public void participantWithdrawing(String participantName) {
        this.model.removeElement(participantName);
    }

    @Override
    public void recieveMessage(ForumMessage message) {
        this.userMessages.setText(this.userMessages.getText() + "\n" + message.getSenderName() + ": " + (String)message.getMessage());
    }

    @Override
    public String getParticipantName() {
        return this.name;
    }
}
